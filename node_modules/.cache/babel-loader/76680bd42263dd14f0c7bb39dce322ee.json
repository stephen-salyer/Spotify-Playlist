{"ast":null,"code":"var clientId = 'a7928225b6ed4e76b582d73ae4999309';\nvar redirectUri = 'http://localhost:3000/callback'; // Have to add this to your accepted Spotify redirect URIs on the Spotify API.\n\nvar accessToken;\nvar userId;\nvar Spotify = {\n  getAccessToken: function getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    var accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    var expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      var expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(function () {\n        return accessToken = '';\n      }, expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      var accessUrl = \"https://accounts.spotify.com/authorize?client_id=\".concat(clientId, \"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirectUri);\n      window.location = accessUrl;\n    }\n  },\n  search: function search(term) {\n    var accessToken = Spotify.getAccessToken();\n    return fetch(\"https://api.spotify.com/v1/search?type=track&q=\".concat(term), {\n      headers: {\n        Authorization: \"Bearer \".concat(accessToken)\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (jsonResponse) {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n\n      return jsonResponse.tracks.items.map(function (track) {\n        return {\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri\n        };\n      });\n    });\n  },\n  savePlaylist: function savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n\n    var accessToken = Spotify.getAccessToken();\n    var headers = {\n      Authorization: \"Bearer \".concat(accessToken)\n    };\n    return fetch('https://api.spotify.com/v1/me', {\n      headers: headers\n    }).then(function (response) {\n      return response.json();\n    }).then(function (jsonResponse) {\n      userId = jsonResponse.id;\n      return fetch(\"https://api.spotify.com/v1/users/\".concat(userId, \"/playlists\"), {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({\n          name: name\n        })\n      }).then(function (response) {\n        return response.json();\n      }).then(function (jsonResponse) {\n        var playlistId = jsonResponse.id;\n        return fetch(\"https://api.spotify.com/v1/users/\".concat(userId, \"/playlists/\").concat(playlistId, \"/tracks\"), {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({\n            uris: trackUris\n          })\n        });\n      });\n    });\n  },\n  addTracks: function addTracks(playlistID, trackURIs, userId) {\n    fetch(\"https://api.spotify.com/v1/users/\".concat(userId, \"/playlists/\").concat(playlistID, \"/tracks\"), {\n      method: 'POST',\n      headers: {\n        Authorization: \"Bearer \".concat(accessToken),\n        \"Content-Type\": 'application/json'\n      },\n      body: JSON.stringify({\n        uris: trackURIs\n      })\n    });\n  },\n  findUserId: function findUserId() {\n    if (accessToken === undefined) {\n      this.getAccessToken();\n    }\n\n    var userId;\n    return fetch(\"https://api.spotify.com/v1/me\", {\n      headers: {\n        Authorization: \"Bearer \".concat(accessToken)\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (jsonResponse) {\n      userId = jsonResponse.id;\n      return userId;\n    });\n  }\n};\nexport default Spotify;","map":{"version":3,"sources":["/Users/stephensalyer/Documents/Spotify-playlist/spotify-playlist/src/Util/Spotify.js"],"names":["clientId","redirectUri","accessToken","userId","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","trackUris","length","method","body","JSON","stringify","playlistId","uris","addTracks","playlistID","trackURIs","findUserId","undefined"],"mappings":"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","sourcesContent":["const clientId = 'a7928225b6ed4e76b582d73ae4999309';\nconst redirectUri = 'http://localhost:3000/callback'; // Have to add this to your accepted Spotify redirect URIs on the Spotify API.\n\nlet accessToken;\nlet userId;\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  },\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = { Authorization: `Bearer ${accessToken}` };\n\n    return fetch('https://api.spotify.com/v1/me', {headers: headers}\n    ).then(response => response.json()\n    ).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({name: name})\n      }).then(response => response.json()\n      ).then(jsonResponse => {\n        const playlistId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({uris: trackUris})\n        });\n      });\n    });\n  },\n\n  addTracks(playlistID, trackURIs, userId) {\n\t\t\tfetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistID}/tracks`, {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: `Bearer ${accessToken}`,\n\t\t\t\t\t\"Content-Type\": 'application/json'\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify({uris: trackURIs})\n\t\t\t});\n    },\n\n\t\tfindUserId() {\n\t\t\tif(accessToken === undefined) {\n\t\t\t\tthis.getAccessToken();\n\t\t\t}\n\t\t\tlet userId;\n\t\t\treturn fetch(`https://api.spotify.com/v1/me`, {headers: {\n\t\t\t\tAuthorization: `Bearer ${accessToken}`\n\t\t\t}}\n\t\t\t\t).then(response => {return response.json()}\n\t\t\t\t).then(jsonResponse => {\n\t\t\t\t\tuserId = jsonResponse.id;\n\t\t\t\t\treturn userId;\n\t\t\t\t});\n\t\t}\n};\n\nexport default Spotify;\n"]},"metadata":{},"sourceType":"module"}