{"ast":null,"code":"import _defineProperty from \"/Users/stephensalyer/Documents/Spotify-playlist/spotify-playlist/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/Users/stephensalyer/Documents/Spotify-playlist/spotify-playlist/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/stephensalyer/Documents/Spotify-playlist/spotify-playlist/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar clientId = 'a7928225b6ed4e76b582d73ae4999309';\nvar redirectUri = 'http://localhost:3000/callback'; // Have to add this to your accepted Spotify redirect URIs on the Spotify API.\n\nvar API_URL = 'https://api.spotify.com/v1';\nvar accessToken;\nvar userID;\nvar playlistID;\n\nvar Spotify = _defineProperty({\n  getAccessToken: function getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    var accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    var expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      var expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(function () {\n        return accessToken = '';\n      }, expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      var accessUrl = \"https://accounts.spotify.com/authorize?client_id=\".concat(clientId, \"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirectUri);\n      window.location = accessUrl;\n    }\n  },\n  search: function () {\n    var _search = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(term) {\n      var accessToken;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              accessToken = Spotify.getAccessToken();\n              return _context.abrupt(\"return\", fetch(\"https://api.spotify.com/v1/search?type=track&q=\".concat(term), {\n                headers: {\n                  Authorization: \"Bearer \".concat(accessToken)\n                }\n              }).then(function (response) {\n                return response.json();\n              }).then(function (jsonResponse) {\n                if (!jsonResponse.tracks) {\n                  return [];\n                }\n\n                return jsonResponse.tracks.items.map(function (track) {\n                  return {\n                    id: track.id,\n                    name: track.name,\n                    artist: track.artists[0].name,\n                    album: track.album.name,\n                    uri: track.uri\n                  };\n                });\n              }));\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function search(_x) {\n      return _search.apply(this, arguments);\n    }\n\n    return search;\n  }(),\n  savePlaylist: function () {\n    var _savePlaylist = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2(name, trackUris) {\n      var accessToken, headers;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(!name || !trackUris.length)) {\n                _context2.next = 2;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 2:\n              accessToken = Spotify.getAccessToken();\n              headers = {\n                Authorization: \"Bearer \".concat(accessToken)\n              };\n              return _context2.abrupt(\"return\", fetch('https://api.spotify.com/v1/me', {\n                headers: headers\n              }).then(function (response) {\n                return response.json();\n              }).then(function (jsonResponse) {\n                userId = jsonResponse.id;\n                return fetch(\"https://api.spotify.com/v1/users/\".concat(userId, \"/playlists\"), {\n                  headers: headers,\n                  method: 'POST',\n                  body: JSON.stringify({\n                    name: name\n                  })\n                }).then(function (response) {\n                  return response.json();\n                }).then(function (jsonResponse) {\n                  var playlistId = jsonResponse.id;\n                  return fetch(\"https://api.spotify.com/v1/users/\".concat(userId, \"/playlists/\").concat(playlistId, \"/tracks\"), {\n                    headers: headers,\n                    method: 'POST',\n                    body: JSON.stringify({\n                      uris: trackUris\n                    })\n                  });\n                });\n              }));\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function savePlaylist(_x2, _x3) {\n      return _savePlaylist.apply(this, arguments);\n    }\n\n    return savePlaylist;\n  }()\n}, \"savePlaylist\", function savePlaylist(name, trackURIs) {\n  if (!name || !trackURIs) return;\n  var accessToken = Spotify.getAccessToken();\n  var headers = {\n    Authorization: \"Bearer \".concat(accessToken)\n  };\n  var createPlaylistHeaders = {\n    headers: headers,\n    method: 'POST',\n    body: JSON.stringify({\n      name: name\n    })\n  };\n  var addTracksHeaders = {\n    headers: headers,\n    method: 'POST',\n    body: JSON.stringify({\n      'uris': trackURIs\n    }) // User ID\n\n  };\n  return fetch(\"\".concat(API_URL, \"/me\"), {\n    headers: headers\n  }).then(function (response) {\n    return response.json();\n  }).then(function (jsonResponse) {\n    userID = jsonResponse.id; // console.log(userID)\n    // Create playlist\n\n    return fetch(\"\".concat(API_URL, \"/users/\").concat(userID, \"/playlists\"), createPlaylistHeaders).then(function (response) {\n      return response.json();\n    }).then(function (jsonResponse) {\n      playlistID = jsonResponse.id; // Add tracks to playlist\n\n      return fetch(\"\".concat(API_URL, \"/users/\").concat(userID, \"/playlists/\").concat(playlistID, \"/tracks\"), addTracksHeaders);\n    });\n  });\n});\n\nexport default Spotify;","map":{"version":3,"sources":["/Users/stephensalyer/Documents/Spotify-playlist/spotify-playlist/src/Util/Spotify.js"],"names":["clientId","redirectUri","API_URL","accessToken","userID","playlistID","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","trackURIs","createPlaylistHeaders","addTracksHeaders"],"mappings":"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","sourcesContent":["const clientId = 'a7928225b6ed4e76b582d73ae4999309';\nconst redirectUri = 'http://localhost:3000/callback'; // Have to add this to your accepted Spotify redirect URIs on the Spotify API.\nconst API_URL = 'https://api.spotify.com/v1'\n\nlet accessToken;\nlet userID;\nlet playlistID;\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n\n  async search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  },\n\n  async savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = { Authorization: `Bearer ${accessToken}` };\n\n    return fetch('https://api.spotify.com/v1/me', {headers: headers}\n    ).then(response => response.json()\n    ).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({name: name})\n      }).then(response => response.json()\n      ).then(jsonResponse => {\n        const playlistId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({uris: trackUris})\n        });\n      });\n    });\n  },\n\n  savePlaylist (name, trackURIs) {\n  if (!name || !trackURIs) return\n  const accessToken = Spotify.getAccessToken()\n  const headers = {\n    Authorization: `Bearer ${accessToken}`\n  }\n  const createPlaylistHeaders = {\n    headers: headers,\n    method: 'POST',\n    body: JSON.stringify({\n      name: name\n    })\n  }\n  const addTracksHeaders = {\n    headers: headers,\n    method: 'POST',\n    body: JSON.stringify({\n      'uris': trackURIs\n    })\n  }\n\n  // User ID\n  return fetch (`${API_URL}/me`, {headers: headers})\n    .then(response => response.json())\n    .then(jsonResponse => {\n      userID = jsonResponse.id\n      // console.log(userID)\n      // Create playlist\n      return fetch (`${API_URL}/users/${userID}/playlists`, createPlaylistHeaders)\n        .then(response => response.json())\n        .then(jsonResponse => {\n          playlistID = jsonResponse.id\n          // Add tracks to playlist\n          return fetch(`${API_URL}/users/${userID}/playlists/${playlistID}/tracks`, addTracksHeaders)\n        })\n    })\n},\n};\n\nexport default Spotify;\n"]},"metadata":{},"sourceType":"module"}