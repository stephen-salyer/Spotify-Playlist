{"ast":null,"code":"import _regeneratorRuntime from \"/Users/stephensalyer/Documents/Spotify-playlist/spotify-playlist/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/stephensalyer/Documents/Spotify-playlist/spotify-playlist/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/stephensalyer/Documents/Spotify-playlist/spotify-playlist/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/stephensalyer/Documents/Spotify-playlist/spotify-playlist/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/stephensalyer/Documents/Spotify-playlist/spotify-playlist/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/stephensalyer/Documents/Spotify-playlist/spotify-playlist/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/stephensalyer/Documents/Spotify-playlist/spotify-playlist/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/stephensalyer/Documents/Spotify-playlist/spotify-playlist/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/stephensalyer/Documents/Spotify-playlist/spotify-playlist/src/Components/App/App.js\";\nimport React from 'react';\nimport './App.css';\nimport Playlist from '../Playlist/Playlist';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Spotify from '../../Util/Spotify';\nimport Playlists from '..//Playlists/Playlists'; // import Track from '../Track/Track';\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      searchTerm: '',\n      searchResults: [],\n      playlistTitle: '',\n      playlist: [],\n      userPlaylists: [],\n      message: ''\n    };\n    _this.search = _this.search.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.loadUserPlaylists = _this.loadUserPlaylists.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.setPlaylistTitle = _this.setPlaylistTitle.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.addTrack = _this.addTrack.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.removeTrack = _this.removeTrack.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updatePlaylistName = _this.updatePlaylistName.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.savePlaylist = _this.savePlaylist.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.loadPlaylist = _this.loadPlaylist.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.removePlaylist = _this.removePlaylist.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.loadUserPlaylists();\n    }\n  }, {\n    key: \"search\",\n    value: function () {\n      var _search = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(term) {\n        var results, resultIds, playlistIds, indexes, i, j, k;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return Spotify.search(term);\n\n              case 2:\n                results = _context.sent;\n                this.setState({\n                  searchResults: results\n                });\n                resultIds = this.collectIds(false);\n                playlistIds = this.collectIds(true);\n                indexes = [];\n\n                for (i = 0; i < resultIds.length; i++) {\n                  for (j = 0; j < playlistIds.length; j++) {\n                    if (resultIds[i] === playlistIds[j]) {\n                      indexes.push(i);\n                    }\n                  }\n                }\n\n                if (indexes.length > 0) {\n                  for (k = 0; k < indexes.length; k++) {\n                    results.splice(indexes[k], 1);\n                  }\n                }\n\n                this.setState({\n                  searchResults: results\n                });\n                this.setState({\n                  term: term\n                });\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function search(_x) {\n        return _search.apply(this, arguments);\n      }\n\n      return search;\n    }()\n  }, {\n    key: \"searchForPlaylist\",\n    value: function searchForPlaylist(name) {\n      Spotify.getPlaylist(name).then();\n    }\n  }, {\n    key: \"setPlaylistTitle\",\n    value: function setPlaylistTitle(title) {\n      this.setState({\n        playlistTitle: title\n      });\n    }\n  }, {\n    key: \"loadUserPlaylists\",\n    value: function loadUserPlaylists() {\n      var _this2 = this;\n\n      Spotify.getUserPlaylists().then(function (playlists) {\n        _this2.setMessage(\"number of users playlists: \".concat(playlists.length));\n\n        _this2.setState({\n          userPlaylists: playlists\n        });\n      });\n    }\n  }, {\n    key: \"addTrack\",\n    value: function addTrack(track) {\n      var tracks = this.state.playlistTracks;\n      tracks.push(track);\n      this.setState({\n        playlistTracks: tracks\n      });\n    }\n  }, {\n    key: \"removeTrack\",\n    value: function removeTrack(track) {\n      var tracks = this.state.playlistTracks;\n      tracks = tracks.filter(function (currentTrack) {\n        return currentTrack.id !== track.id;\n      });\n      this.setState({\n        playlistTracks: tracks\n      });\n    }\n  }, {\n    key: \"collectIds\",\n    value: function collectIds(removePlaylist) {\n      var ids = [];\n\n      if (removePlaylist) {\n        this.state.playlistTracks.map(function (track) {\n          return ids.push(track.id);\n        });\n      } else {\n        this.state.searchResults.map(function (track) {\n          return ids.push(track.id);\n        });\n      }\n\n      return ids;\n    }\n  }, {\n    key: \"updatePlaylistName\",\n    value: function updatePlaylistName(name) {\n      this.setState({\n        playlistName: name\n      });\n    }\n  }, {\n    key: \"savePlaylist\",\n    value: function savePlaylist() {\n      var trackURIs = [];\n\n      for (var i = 0; i < this.state.playlistTracks.length; i++) {\n        trackURIs.push(this.state.playlistTracks[i].uri);\n      }\n\n      Spotify.savePlaylist(this.state.playlistName, trackURIs);\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, \"Ja\", React.createElement(\"span\", {\n        className: \"highlight\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, \"mmm\"), \"ing\"), React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(SearchBar, {\n        onSearch: this.search,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"App-playlist\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(SearchResults, {\n        searchResults: this.state.searchResults,\n        onAdd: this.addTrack,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }), React.createElement(Playlist, {\n        playlistTracks: this.state.playlistTracks,\n        onNameChange: this.updatePlaylistName,\n        onRemove: this.removeTrack,\n        onSave: this.savePlaylist,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/stephensalyer/Documents/Spotify-playlist/spotify-playlist/src/Components/App/App.js"],"names":["React","Playlist","SearchBar","SearchResults","Spotify","Playlists","App","props","state","searchTerm","searchResults","playlistTitle","playlist","userPlaylists","message","search","bind","loadUserPlaylists","setPlaylistTitle","addTrack","removeTrack","updatePlaylistName","savePlaylist","loadPlaylist","removePlaylist","term","results","setState","resultIds","collectIds","playlistIds","indexes","i","length","j","push","k","splice","name","getPlaylist","then","title","getUserPlaylists","playlists","setMessage","track","tracks","playlistTracks","filter","currentTrack","id","ids","map","playlistName","trackURIs","uri","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Playlist from '../Playlist/Playlist';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Spotify from '../../Util/Spotify';\nimport Playlists from '..//Playlists/Playlists';\n// import Track from '../Track/Track';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchTerm: '',\n      searchResults: [],\n      playlistTitle: '',\n      playlist: [],\n      userPlaylists: [],\n      message: '',\n    };\n\n    this.search = this.search.bind(this);\n    this.loadUserPlaylists = this.loadUserPlaylists.bind(this);\n    this.setPlaylistTitle = this.setPlaylistTitle.bind(this);\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.loadPlaylist = this.loadPlaylist.bind(this);\n    this.removePlaylist = this.removePlaylist.bind(this);\n  }\n\n  componentDidMount() {\n    this.loadUserPlaylists();\n  }\n\n  async search(term) {\n\t\tconst results = await Spotify.search(term);\n\t\tthis.setState({searchResults: results});\n\t\tconst resultIds = this.collectIds(false);\n\t\tconst playlistIds = this.collectIds(true);\n\t\tlet indexes = [];\n\t\tfor(let i = 0; i < resultIds.length; i++) {\n\t\t\tfor(let j = 0; j < playlistIds.length; j++) {\n\t\t\t\tif (resultIds[i] === playlistIds[j]) {\n\t\t\t\t\tindexes.push(i);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(indexes.length > 0) {\n\t\t\tfor (let k = 0; k < indexes.length; k++) {\n\t\t\t\tresults.splice(indexes[k], 1);\n\t\t\t}\n\t\t}\n\t\tthis.setState({searchResults: results});\n\t\tthis.setState({term: term});\n\t}\n\n    searchForPlaylist (name) {\n    Spotify.getPlaylist(name).then()\n  }\n\n  setPlaylistTitle(title) {\n    this.setState({\n      playlistTitle: title,\n    });\n  }\n\n\n  loadUserPlaylists() {\n    Spotify.getUserPlaylists().then(\n      (playlists) => {\n        this.setMessage(`number of users playlists: ${playlists.length}`);\n        this.setState({\n          userPlaylists: playlists,\n        });\n      },\n    );\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks.push(track);\n\n    this.setState({playlistTracks: tracks});\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n\n    this.setState({playlistTracks: tracks});\n  }\n\n  collectIds(removePlaylist) {\n\t\tlet ids = [];\n\t\tif(removePlaylist) {\n\t\t\tthis.state.playlistTracks.map(track => ids.push(track.id));\n\t\t} else {\n\t\t\tthis.state.searchResults.map(track => ids.push(track.id));\n\t\t}\n\t\treturn ids;\n\t}\n\n  updatePlaylistName(name) {\n    this.setState({playlistName: name});\n  }\n\n  savePlaylist() {\n\t\tlet trackURIs = [];\n\t\tfor(let i = 0; i < this.state.playlistTracks.length; i++) {\n\t\t\ttrackURIs.push(this.state.playlistTracks[i].uri);\n\t\t}\n\t\tSpotify.savePlaylist(this.state.playlistName, trackURIs);\n\t\tthis.setState({playlistName: 'New Playlist', playlistTracks: []});\n\t}\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults}\n                           onAdd={this.addTrack} />\n            <Playlist playlistTracks={this.state.playlistTracks}\n                      onNameChange={this.updatePlaylistName}\n                      onRemove={this.removeTrack}\n                      onSave={this.savePlaylist} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}