{"ast":null,"code":"var clientId = 'a7928225b6ed4e76b582d73ae4999309';\nvar uri = 'http://localhost:3000/callback'; // Have to add this to your accepted Spotify redirect URIs on the Spotify API.\n\nvar apiBaseUrl = 'https://api.spotify.com/v1';\nvar authorizationUrl = 'https://accounts.spotify.com/authorize';\nvar accessToken;\nvar requestTime;\nvar expirationTime;\nvar userId;\nvar Spotify = {\n  getAccessToken: function getAccessToken() {\n    if (expirationTime && Date.now() > expirationTime) {\n      requestTime = undefined;\n      expirationTime = undefined;\n      accessToken = undefined;\n      userId = undefined;\n      window.location.hash = '';\n    }\n\n    if (!accessToken) {\n      if (window.location.hash.includes('#access_token')) {\n        accessToken = window.location.hash.match(/(#access_token=)(.*?)(&)/)[2];\n        var expiresIn = window.location.hash.match(/(expires_in=)(\\d*)/)[2];\n        expirationTime = requestTime + expiresIn * 1000;\n      } else {\n        requestTime = Date.now();\n        window.location.href = \"\".concat(authorizationUrl, \"?client_id=\").concat(clientId, \"&scope=playlist-modify-public&redirect_uri=\").concat(uri, \"&response_type=token\");\n      }\n    }\n\n    return accessToken;\n  },\n  buildAuthorizationHeader: function buildAuthorizationHeader() {\n    var authorizationHeader = {\n      Authorization: \"Bearer \".concat(this.getAccessToken())\n    };\n    return authorizationHeader;\n  },\n  handleResponse: function handleResponse(response) {\n    if (response.ok) {\n      return response.json();\n    }\n\n    throw new Error(\"Spotify says '\".concat(response.statusText, \"'\"));\n  },\n  getUserId: function getUserId() {\n    if (userId) {\n      return new Promise(function (resolve) {\n        return resolve(userId);\n      });\n    }\n\n    var getUserNameUrl = \"\".concat(apiBaseUrl, \"/me\");\n    return fetch(getUserNameUrl, {\n      headers: this.buildAuthorizationHeader()\n    }).then(this.handleResponse).then(function (jsonResponse) {\n      if (jsonResponse.id) {\n        userId = jsonResponse.id;\n        return jsonResponse.id;\n      }\n\n      throw new Error('userId: received bad format');\n    });\n  },\n  getUserPlaylists: function getUserPlaylists() {\n    var _this = this;\n\n    Spotify.getAccessToken(); // TODO WE read all playlists (for loop), not only the first 50 (limitation of the API)\n\n    return Spotify.getUserId().then(function () {\n      var getPlaylistsUrl = \"\".concat(apiBaseUrl, \"/users/\").concat(userId, \"/playlists?limit=50\");\n      return fetch(getPlaylistsUrl, {\n        headers: _this.buildAuthorizationHeader()\n      }).then(function (response) {\n        if (response.ok) {\n          return response.json();\n        }\n\n        throw new Error('Request failed: playlists not obtained');\n      }).then(function (jsonResponse) {\n        if (jsonResponse.items) {\n          return jsonResponse.items.map(function (playlist) {\n            return {\n              id: playlist.id,\n              title: playlist.name,\n              numberOfTracks: playlist.tracks.total\n            };\n          });\n        }\n\n        return [];\n      });\n    });\n  },\n  search: function search(term) {\n    var fetchUrl = \"\".concat(apiBaseUrl, \"/search?type=track&q=\").concat(term);\n    return fetch(fetchUrl, {\n      headers: this.buildAuthorizationHeader()\n    }).then(this.handleResponse).then(function (jsonResponse) {\n      if (jsonResponse.tracks) {\n        return jsonResponse.tracks.items.map(function (item) {\n          return {\n            id: item.id,\n            title: item.name,\n            album: item.album.name,\n            artist: item.artists[0].name,\n            uri: item.uri\n          };\n        });\n      }\n\n      throw new Error('Search results: bad format');\n    });\n  },\n  loadTracks: function loadTracks(playlistId) {\n    console.log(\"load tracks of playlist with id \".concat(playlistId));\n    Spotify.getAccessToken();\n    return Spotify.getUserId().then(function () {\n      var getPlaylistTracksUrl = \"\".concat(apiBaseUrl, \"/users/\").concat(userId, \"/playlists/\").concat(playlistId, \"/tracks\");\n      return fetch(getPlaylistTracksUrl, {\n        headers: {\n          Authorization: \"Bearer \".concat(accessToken)\n        }\n      }).then(function (response) {\n        if (response.ok) {\n          return response.json();\n        }\n\n        throw new Error('Request failed: tracks from playlist not obtained');\n      }).then(function (jsonResponse) {\n        if (jsonResponse.items) {\n          return jsonResponse.items.map(function (item) {\n            return {\n              id: item.track.id,\n              title: item.track.name,\n              album: item.track.album.name,\n              artist: item.track.artists[0].name,\n              uri: item.track.uri\n            };\n          });\n        }\n\n        console.log('no tracks in that playlist.');\n        return [];\n      });\n    });\n  },\n  createPlaylist: function createPlaylist(title) {\n    var createPlaylistUrl = \"\".concat(apiBaseUrl, \"/users/\").concat(userId, \"/playlists\");\n    return fetch(createPlaylistUrl, {\n      method: 'POST',\n      headers: this.buildAuthorizationHeader(),\n      body: JSON.stringify({\n        name: title\n      })\n    }).then(this.handleResponse).then(function (jsonResponse) {\n      if (jsonResponse.id) {\n        return jsonResponse.id;\n      }\n\n      throw new Error('received no playlistId');\n    });\n  },\n  saveTracksToPlaylist: function saveTracksToPlaylist(playlistId, uriList) {\n    var populatePlaylistUrl = \"\".concat(apiBaseUrl, \"/users/\").concat(userId, \"/playlists/\").concat(playlistId, \"/tracks\");\n    return fetch(populatePlaylistUrl, {\n      method: 'POST',\n      headers: this.buildAuthorizationHeader(),\n      body: JSON.stringify({\n        uris: uriList\n      })\n    }).then(this.handleResponse);\n  },\n  save: function save(title, tracks) {\n    var uriList = tracks.map(function (track) {\n      return track.uri;\n    });\n    return Spotify.getUserId().then(function () {\n      return Spotify.createPlaylist(title);\n    }).then(function (playlistId) {\n      return Spotify.saveTracksToPlaylist(playlistId, uriList);\n    });\n  },\n  remove: function remove(playlistId) {\n    var _this2 = this;\n\n    console.log(\"remove playlist with id \".concat(playlistId));\n    Spotify.getAccessToken();\n    return Spotify.getUserId().then(function () {\n      var removePlaylistUrl = \"\".concat(apiBaseUrl, \"/users/\").concat(userId, \"/playlists/\").concat(playlistId, \"/followers\");\n      return fetch(removePlaylistUrl, {\n        method: 'DELETE',\n        headers: _this2.buildAuthorizationHeader()\n      }); // no response expected\n    });\n  }\n};\nexport default Spotify;","map":{"version":3,"sources":["/Users/stephensalyer/Documents/Spotify-playlist/spotify-playlist/src/Util/Spotify.js"],"names":["clientId","uri","apiBaseUrl","authorizationUrl","accessToken","requestTime","expirationTime","userId","Spotify","getAccessToken","Date","now","undefined","window","location","hash","includes","match","expiresIn","href","buildAuthorizationHeader","authorizationHeader","Authorization","handleResponse","response","ok","json","Error","statusText","getUserId","Promise","resolve","getUserNameUrl","fetch","headers","then","jsonResponse","id","getUserPlaylists","getPlaylistsUrl","items","map","playlist","title","name","numberOfTracks","tracks","total","search","term","fetchUrl","item","album","artist","artists","loadTracks","playlistId","console","log","getPlaylistTracksUrl","track","createPlaylist","createPlaylistUrl","method","body","JSON","stringify","saveTracksToPlaylist","uriList","populatePlaylistUrl","uris","save","remove","removePlaylistUrl"],"mappings":"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","sourcesContent":["const clientId = 'a7928225b6ed4e76b582d73ae4999309';\nconst uri = 'http://localhost:3000/callback'; // Have to add this to your accepted Spotify redirect URIs on the Spotify API.\nconst apiBaseUrl = 'https://api.spotify.com/v1'\nconst authorizationUrl = 'https://accounts.spotify.com/authorize';\n\nlet accessToken;\nlet requestTime;\nlet expirationTime;\nlet userId;\n\nconst Spotify = {\n  getAccessToken() {\n    if (expirationTime && Date.now() > expirationTime) {\n      requestTime = undefined;\n      expirationTime = undefined;\n      accessToken = undefined;\n      userId = undefined;\n      window.location.hash = '';\n    }\n    if (!accessToken) {\n      if (window.location.hash.includes('#access_token')) {\n        accessToken = window.location.hash.match(/(#access_token=)(.*?)(&)/)[2];\n        const expiresIn = window.location.hash.match(/(expires_in=)(\\d*)/)[2];\n        expirationTime = requestTime + (expiresIn * 1000);\n      } else {\n        requestTime = Date.now();\n        window.location.href = `${authorizationUrl}?client_id=${clientId}&scope=playlist-modify-public&redirect_uri=${uri}&response_type=token`;\n      }\n    }\n    return accessToken;\n  },\n\n  buildAuthorizationHeader() {\n    const authorizationHeader = {\n      Authorization: `Bearer ${this.getAccessToken()}`,\n    };\n    return authorizationHeader;\n  },\n\n  handleResponse(response) {\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(`Spotify says '${response.statusText}'`);\n  },\n\n  getUserId() {\n    if (userId) {\n      return new Promise(\n        resolve => resolve(userId),\n      );\n    }\n    const getUserNameUrl = `${apiBaseUrl}/me`;\n    return fetch(getUserNameUrl, {\n      headers: this.buildAuthorizationHeader(),\n    }).then(this.handleResponse,\n    ).then(\n      (jsonResponse) => {\n        if (jsonResponse.id) {\n          userId = jsonResponse.id;\n          return jsonResponse.id;\n        }\n        throw new Error('userId: received bad format');\n      },\n    );\n  },\n\n  getUserPlaylists() {\n    Spotify.getAccessToken();\n    // TODO WE read all playlists (for loop), not only the first 50 (limitation of the API)\n    return Spotify.getUserId().then(() => {\n      const getPlaylistsUrl = `${apiBaseUrl}/users/${userId}/playlists?limit=50`;\n      return fetch(getPlaylistsUrl, {\n        headers: this.buildAuthorizationHeader(),\n      }).then(\n        (response) => {\n          if (response.ok) {\n            return response.json();\n          }\n          throw new Error('Request failed: playlists not obtained');\n        },\n      ).then(\n        (jsonResponse) => {\n          if (jsonResponse.items) {\n            return jsonResponse.items.map(playlist =>\n              ({\n                id: playlist.id,\n                title: playlist.name,\n                numberOfTracks: playlist.tracks.total,\n              }),\n            );\n          }\n          return [];\n        },\n      );\n    });\n  },\n\n  search(term) {\n    const fetchUrl = `${apiBaseUrl}/search?type=track&q=${term}`;\n    return fetch(fetchUrl, {\n      headers: this.buildAuthorizationHeader(),\n    }).then(this.handleResponse,\n    ).then(\n      (jsonResponse) => {\n        if (jsonResponse.tracks) {\n          return jsonResponse.tracks.items.map(\n            item => ({\n              id: item.id,\n              title: item.name,\n              album: item.album.name,\n              artist: item.artists[0].name,\n              uri: item.uri,\n            }),\n          );\n        }\n        throw new Error('Search results: bad format');\n      },\n    );\n  },\n\n  loadTracks(playlistId) {\n    console.log(`load tracks of playlist with id ${playlistId}`);\n    Spotify.getAccessToken();\n    return Spotify.getUserId().then(() => {\n      const getPlaylistTracksUrl = `${apiBaseUrl}/users/${userId}/playlists/${playlistId}/tracks`;\n      return fetch(getPlaylistTracksUrl, {\n        headers: {Authorization: `Bearer ${accessToken}`},\n      }).then(\n        (response) => {\n          if (response.ok) {\n            return response.json();\n          }\n          throw new Error('Request failed: tracks from playlist not obtained');\n        },\n      ).then(\n        (jsonResponse) => {\n          if (jsonResponse.items) {\n            return jsonResponse.items.map(item => ({\n              id: item.track.id,\n              title: item.track.name,\n              album: item.track.album.name,\n              artist: item.track.artists[0].name,\n              uri: item.track.uri,\n            }),\n            );\n          }\n          console.log('no tracks in that playlist.');\n          return [];\n        },\n      );\n    });\n  },\n\n  createPlaylist(title) {\n    const createPlaylistUrl = `${apiBaseUrl}/users/${userId}/playlists`;\n    return fetch(createPlaylistUrl, {\n      method: 'POST',\n      headers: this.buildAuthorizationHeader(),\n      body: JSON.stringify({ name: title }),\n    }).then(this.handleResponse,\n    ).then(\n      (jsonResponse) => {\n        if (jsonResponse.id) {\n          return jsonResponse.id;\n        }\n        throw new Error('received no playlistId');\n      },\n    );\n  },\n\n  saveTracksToPlaylist(playlistId, uriList) {\n    const populatePlaylistUrl = `${apiBaseUrl}/users/${userId}/playlists/${playlistId}/tracks`;\n    return fetch(populatePlaylistUrl, {\n      method: 'POST',\n      headers: this.buildAuthorizationHeader(),\n      body: JSON.stringify({ uris: uriList }),\n    }).then(\n      this.handleResponse,\n    );\n  },\n\n  save(title, tracks) {\n    const uriList =\n      tracks.map(\n        track => track.uri,\n      );\n    return Spotify.getUserId()\n      .then(\n        () => Spotify.createPlaylist(title),\n      ).then(\n        playlistId => Spotify.saveTracksToPlaylist(playlistId, uriList),\n      );\n  },\n\n  remove(playlistId) {\n    console.log(`remove playlist with id ${playlistId}`);\n    Spotify.getAccessToken();\n    return Spotify.getUserId().then(() => {\n      const removePlaylistUrl = `${apiBaseUrl}/users/${userId}/playlists/${playlistId}/followers`;\n      return fetch(removePlaylistUrl, {\n        method: 'DELETE',\n        headers: this.buildAuthorizationHeader(),\n      }); // no response expected\n    });\n  },\n\n};\n\nexport default Spotify;\n"]},"metadata":{},"sourceType":"module"}