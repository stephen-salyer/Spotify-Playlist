{"ast":null,"code":"import _toConsumableArray from \"/Users/stephensalyer/Documents/Spotify-playlist/spotify-playlist/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/stephensalyer/Documents/Spotify-playlist/spotify-playlist/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/stephensalyer/Documents/Spotify-playlist/spotify-playlist/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/stephensalyer/Documents/Spotify-playlist/spotify-playlist/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/stephensalyer/Documents/Spotify-playlist/spotify-playlist/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/stephensalyer/Documents/Spotify-playlist/spotify-playlist/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/stephensalyer/Documents/Spotify-playlist/spotify-playlist/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/stephensalyer/Documents/Spotify-playlist/spotify-playlist/src/Components/App/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Playlist from '../Playlist/Playlist';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Spotify from '../../Util/Spotify';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      SearchResults: [],\n      playlistName: \"New Playlist\",\n      playlistTracks: []\n    };\n    _this.addTrack = _this.addTrack.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.removeTrack = _this.removeTrack.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updatePlaylistName = _this.updatePlaylistName.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.savePlaylist = _this.savePlaylist.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.search = _this.search.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } //If track is not found in playlist, adds the track\n\n\n  _createClass(App, [{\n    key: \"addTrack\",\n    value: function addTrack(track) {\n      var tracks = [].concat(_toConsumableArray(this.state.playlistTracks), [track]);\n      this.setState({\n        playlistTracks: tracks\n      });\n    }\n  }, {\n    key: \"removeTrack\",\n    value: function removeTrack(track) {\n      var tracks = this.state.playlistTracks;\n      tracks = tracks.filter(function (currentTrack) {\n        return currentTrack.id !== track.id;\n      });\n      this.setState({\n        playlistTracks: tracks\n      });\n    }\n  }, {\n    key: \"updatePlaylistName\",\n    value: function updatePlaylistName(name) {\n      this.setState({\n        playlistName: name\n      });\n    }\n  }, {\n    key: \"savePlaylist\",\n    value: function savePlaylist() {\n      var trackURIs = this.state.playlistTracks.map(function (track) {\n        return track.uri;\n      });\n      Spotify.savePlaylist(this.state.playlistName, trackURIs);\n      this.setState({\n        playlistName: \"New Playlist\",\n        playlistTracks: []\n      });\n      alert(\"Saved to Spotify\");\n    } //Calls on the util file to run the AJAX call for Spotify API, then sets state\n\n  }, {\n    key: \"search\",\n    value: function search(term) {\n      var _this2 = this;\n\n      Spotify.search(term).then(function (response) {\n        return _this2.setState({\n          SearchResults: response\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, \"Ja\", React.createElement(\"span\", {\n        className: \"highlight\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, \"mmm\"), \"ing\"), React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(SearchBar, {\n        onSearch: this.search,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"App-playlist\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(SearchResults, {\n        searchResults: this.state.SearchResults,\n        onAdd: this.addTrack,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }), React.createElement(Playlist, {\n        playlistName: this.state.playlistName,\n        playlistTracks: this.state.playlistTracks,\n        onRemove: this.removeTrack,\n        onNameChange: this.updatePlaylistName,\n        onSave: this.savePlaylist,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/stephensalyer/Documents/Spotify-playlist/spotify-playlist/src/Components/App/App.js"],"names":["React","Component","Playlist","SearchBar","SearchResults","Spotify","App","props","state","playlistName","playlistTracks","addTrack","bind","removeTrack","updatePlaylistName","savePlaylist","search","track","tracks","setState","filter","currentTrack","id","name","trackURIs","map","uri","alert","term","then","response"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Playlist from '../Playlist/Playlist';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Spotify from '../../Util/Spotify';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      SearchResults: [],\n      playlistName: \"New Playlist\",\n      playlistTracks: []\n    };\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  //If track is not found in playlist, adds the track\n  addTrack(track) {\n    let tracks = [...this.state.playlistTracks, track];\n\n    this.setState({ playlistTracks: tracks });\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n\n    this.setState({ playlistTracks: tracks });\n  }\n\n  updatePlaylistName(name) {\n    this.setState({ playlistName: name });\n  }\n\n  savePlaylist() {\n    const trackURIs = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackURIs);\n    this.setState({ playlistName: \"New Playlist\", playlistTracks: [] });\n    alert(\"Saved to Spotify\");\n\n  }\n\n  //Calls on the util file to run the AJAX call for Spotify API, then sets state\n  search(term) {\n    Spotify.search(term).then(response =>\n      this.setState({ SearchResults: response })\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>\n          Ja<span className=\"highlight\">mmm</span>ing\n        </h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults\n              searchResults={this.state.SearchResults}\n              onAdd={this.addTrack}\n            />\n            <Playlist\n              playlistName={this.state.playlistName}\n              playlistTracks={this.state.playlistTracks}\n              onRemove={this.removeTrack}\n              onNameChange={this.updatePlaylistName}\n              onSave={this.savePlaylist}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}