{"ast":null,"code":"import _regeneratorRuntime from \"/Users/stephensalyer/Documents/Spotify-playlist/spotify-playlist/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/stephensalyer/Documents/Spotify-playlist/spotify-playlist/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar clientId = 'a7928225b6ed4e76b582d73ae4999309';\nvar redirectUri = 'http://localhost:3000/callback'; // Have to add this to your accepted Spotify redirect URIs on the Spotify API.\n\nvar accessToken;\nvar userId;\nvar Spotify = {\n  getAccessToken: function getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    var accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    var expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      var expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(function () {\n        return accessToken = '';\n      }, expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      var accessUrl = \"https://accounts.spotify.com/authorize?client_id=\".concat(clientId, \"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirectUri);\n      window.location = accessUrl;\n    }\n  },\n  search: function () {\n    var _search = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(term) {\n      var accessToken;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              accessToken = Spotify.getAccessToken();\n              return _context.abrupt(\"return\", fetch(\"https://api.spotify.com/v1/search?type=track&q=\".concat(term), {\n                headers: {\n                  Authorization: \"Bearer \".concat(accessToken)\n                }\n              }).then(function (response) {\n                return response.json();\n              }).then(function (jsonResponse) {\n                if (!jsonResponse.tracks) {\n                  return [];\n                }\n\n                return jsonResponse.tracks.items.map(function (track) {\n                  return {\n                    id: track.id,\n                    name: track.name,\n                    artist: track.artists[0].name,\n                    album: track.album.name,\n                    uri: track.uri\n                  };\n                });\n              }));\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function search(_x) {\n      return _search.apply(this, arguments);\n    }\n\n    return search;\n  }(),\n  savePlaylist: function () {\n    var _savePlaylist = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2(name, trackUris) {\n      var accessToken, headers;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(!name || !trackUris.length)) {\n                _context2.next = 2;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 2:\n              accessToken = Spotify.getAccessToken();\n              headers = {\n                Authorization: \"Bearer \".concat(accessToken)\n              };\n              return _context2.abrupt(\"return\", fetch('https://api.spotify.com/v1/me', {\n                headers: headers\n              }).then(function (response) {\n                return response.json();\n              }).then(function (jsonResponse) {\n                userId = jsonResponse.id;\n                return fetch(\"https://api.spotify.com/v1/users/\".concat(userId, \"/playlists\"), {\n                  headers: headers,\n                  method: 'POST',\n                  body: JSON.stringify({\n                    name: name\n                  })\n                }).then(function (response) {\n                  return response.json();\n                }).then(function (jsonResponse) {\n                  var playlistId = jsonResponse.id;\n                  return fetch(\"https://api.spotify.com/v1/users/\".concat(userId, \"/playlists/\").concat(playlistId, \"/tracks\"), {\n                    headers: headers,\n                    method: 'POST',\n                    body: JSON.stringify({\n                      uris: trackUris\n                    })\n                  });\n                });\n              }));\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function savePlaylist(_x2, _x3) {\n      return _savePlaylist.apply(this, arguments);\n    }\n\n    return savePlaylist;\n  }(),\n  addTracks: function () {\n    var _addTracks = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3(playlistID, trackURIs, userId) {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              fetch(\"https://api.spotify.com/v1/users/\".concat(userId, \"/playlists/\").concat(playlistID, \"/tracks\"), {\n                method: 'POST',\n                headers: {\n                  Authorization: \"Bearer \".concat(accessToken),\n                  \"Content-Type\": 'application/json'\n                },\n                body: JSON.stringify({\n                  uris: trackURIs\n                })\n              });\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    function addTracks(_x4, _x5, _x6) {\n      return _addTracks.apply(this, arguments);\n    }\n\n    return addTracks;\n  }(),\n  findUserId: function () {\n    var _findUserId = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4() {\n      var userId;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (accessToken === undefined) {\n                this.getAccessToken();\n              }\n\n              return _context4.abrupt(\"return\", fetch(\"https://api.spotify.com/v1/me\", {\n                headers: {\n                  Authorization: \"Bearer \".concat(accessToken)\n                }\n              }).then(function (response) {\n                return response.json();\n              }).then(function (jsonResponse) {\n                userId = jsonResponse.id;\n                return userId;\n              }));\n\n            case 2:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function findUserId() {\n      return _findUserId.apply(this, arguments);\n    }\n\n    return findUserId;\n  }()\n};\nexport default Spotify;","map":{"version":3,"sources":["/Users/stephensalyer/Documents/Spotify-playlist/spotify-playlist/src/Util/Spotify.js"],"names":["clientId","redirectUri","accessToken","userId","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","trackUris","length","method","body","JSON","stringify","playlistId","uris","addTracks","playlistID","trackURIs","findUserId","undefined"],"mappings":"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","sourcesContent":["const clientId = 'a7928225b6ed4e76b582d73ae4999309';\nconst redirectUri = 'http://localhost:3000/callback'; // Have to add this to your accepted Spotify redirect URIs on the Spotify API.\n\nlet accessToken;\nlet userId;\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n\n  async search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  },\n\n  async savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = { Authorization: `Bearer ${accessToken}` };\n\n    return fetch('https://api.spotify.com/v1/me', {headers: headers}\n    ).then(response => response.json()\n    ).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({name: name})\n      }).then(response => response.json()\n      ).then(jsonResponse => {\n        const playlistId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({uris: trackUris})\n        });\n      });\n    });\n  },\n\n  async addTracks(playlistID, trackURIs, userId) {\n\t\t\tfetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistID}/tracks`, {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: `Bearer ${accessToken}`,\n\t\t\t\t\t\"Content-Type\": 'application/json'\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify({uris: trackURIs})\n\t\t\t});\n    },\n\n\t\tasync findUserId() {\n\t\t\tif(accessToken === undefined) {\n\t\t\t\tthis.getAccessToken();\n\t\t\t}\n\t\t\tlet userId;\n\t\t\treturn fetch(`https://api.spotify.com/v1/me`, {headers: {\n\t\t\t\tAuthorization: `Bearer ${accessToken}`\n\t\t\t}}\n\t\t\t\t).then(response => {return response.json()}\n\t\t\t\t).then(jsonResponse => {\n\t\t\t\t\tuserId = jsonResponse.id;\n\t\t\t\t\treturn userId;\n\t\t\t\t});\n\t\t}\n};\n\nexport default Spotify;\n"]},"metadata":{},"sourceType":"module"}